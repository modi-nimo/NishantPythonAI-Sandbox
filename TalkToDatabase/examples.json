[
  {
    "example_question": "List the names and roles of all employees.",
    "example_answer": "SELECT \"FirstName\", \"LastName\", \"Role\" FROM dbo.\"Employees\";"
  },
  {
    "example_question": "Show me all the work orders that are currently in progress.",
    "example_answer": "SELECT \"WorkOrderID\", \"ProductID\", \"ScheduledStartDateTime\" FROM dbo.\"WorkOrders\" WHERE \"Status\" = 'InProgress';"
  },
  {
    "example_question": "What are the different types of defect categories?",
    "example_answer": "SELECT \"CategoryName\", \"Description\" FROM dbo.\"DefectCategories\";"
  },
  {
    "example_question": "Find all defects that have not been closed yet.",
    "example_answer": "SELECT \"DefectName\", \"DefectReason\", \"ReportedDateTime\" FROM dbo.\"Defects\" WHERE \"IsClosed\" = false;"
  },
  {
    "example_question": "List all work orders and the name of the product associated with each.",
    "example_answer": "SELECT T1.\"WorkOrderID\", T1.\"Status\", T2.\"ProductName\" FROM dbo.\"WorkOrders\" AS T1 JOIN dbo.\"Products\" AS T2 ON T1.\"ProductID\" = T2.\"ProductID\";"
  },
  {
    "example_question": "What raw materials were used for Work Order ID 1, and in what quantity?",
    "example_answer": "SELECT T2.\"MaterialName\", T1.\"QuantityUsed\", T1.\"UsageDateTime\" FROM dbo.\"WorkOrderMaterials\" AS T1 JOIN dbo.\"RawMaterials\" AS T2 ON T1.\"MaterialID\" = T2.\"MaterialID\" WHERE T1.\"WorkOrderID\" = 1;"
  },
  {
    "example_question": "Show the total quantity produced for each product.",
    "example_answer": "SELECT T2.\"ProductName\", SUM(T1.\"QuantityProduced\") AS \"TotalQuantity\" FROM dbo.\"ProductionData\" AS T1 JOIN dbo.\"Products\" AS T2 ON T1.\"ProductID\" = T2.\"ProductID\" GROUP BY T2.\"ProductName\" ORDER BY \"TotalQuantity\" DESC;"
  },
  {
    "example_question": "Which raw materials in the inventory were quality-checked by supervisors?",
    "example_answer": "SELECT T3.\"MaterialName\", T1.\"Quantity\", T2.\"FirstName\" AS \"SupervisorFirstName\", T2.\"LastName\" AS \"SupervisorLastName\" FROM dbo.\"RawMaterialInventory\" AS T1 JOIN dbo.\"Employees\" AS T2 ON T1.\"QualityCheckedByID\" = T2.\"EmployeeID\" JOIN dbo.\"RawMaterials\" AS T3 ON T1.\"MaterialID\" = T3.\"MaterialID\" WHERE T2.\"Role\" = 'Supervisor';"
  },
  {
    "example_question": "Find the top 3 employees who have handled the most defects.",
    "example_answer": "SELECT T2.\"FirstName\", T2.\"LastName\", COUNT(T1.\"DefectID\") AS \"DefectsHandled\" FROM dbo.\"Defects\" AS T1 JOIN dbo.\"Employees\" AS T2 ON T1.\"HandledByID\" = T2.\"EmployeeID\" GROUP BY T2.\"FirstName\", T2.\"LastName\" ORDER BY \"DefectsHandled\" DESC LIMIT 3;"
  },
  {
    "example_question": "List products that have had defects categorized as 'Material' issues.",
    "example_answer": "SELECT DISTINCT T3.\"ProductName\" FROM dbo.\"Defects\" AS T1 JOIN dbo.\"WorkOrders\" AS T2 ON T1.\"WorkOrderID\" = T2.\"WorkOrderID\" JOIN dbo.\"Products\" AS T3 ON T2.\"ProductID\" = T3.\"ProductID\" JOIN dbo.\"DefectCategories\" AS T4 ON T1.\"CategoryID\" = T4.\"CategoryID\" WHERE T4.\"CategoryName\" = 'Material';"
  },
  {
    "example_question": "Give Me OEE report for month on Jan 2025 for each day.",
    "example_answer": "DECLARE @IdealProductionRateUnitsPerHour DECIMAL(10, 2);\nSET @IdealProductionRateUnitsPerHour = 1.0; --<-- Change this value as needed\n\n\n-- Use a recursive CTE to generate a calendar for all days in January 2025\nWITH AllDays([Date]) AS (\n    SELECT CAST('2025-01-01' AS DATE) AS [Date]\n    UNION ALL\n    SELECT DATEADD(day, 1, [Date])\n    FROM AllDays\n    WHERE [Date] < '2025-01-31'\n),\n\n-- CTE 1: DYNAMICALLY calculate Planned Production Hours for each Work Center based on shifts actually run\nWorkCenterDailyShifts AS (\n    SELECT\n        pd.[OpDate] AS [Date],\n        pd.[WorkCenterID],\n        CAST(SUM(\n            -- Handle night shifts that cross midnight\n            CASE\n                WHEN s.[EndTime] < s.[StartTime] THEN DATEDIFF(hour, s.[StartTime], s.[EndTime]) + 24\n                ELSE DATEDIFF(hour, s.[StartTime], s.[EndTime])\n            END\n        ) AS DECIMAL(10, 2)) AS [PlannedProductionHours]\n    FROM (\n        -- Get unique shifts run by a work center on a given day\n        SELECT DISTINCT CAST([ProductionDateTime] AS DATE) AS [OpDate], [WorkCenterID], [ShiftID]\n        FROM dbo.[ProductionData]\n        WHERE [ProductionDateTime] >= '2025-01-01' AND [ProductionDateTime] < '2025-02-01'\n    ) pd\n    JOIN dbo.[Shifts] s ON pd.[ShiftID] = s.[ShiftID]\n    GROUP BY pd.[OpDate], pd.[WorkCenterID]\n),\n\n-- CTE 2: Aggregate production stats for each work center's daily operation\nDailyProductionMetrics AS (\n    SELECT\n        CAST([ProductionDateTime] AS DATE) AS [Date],\n        [WorkCenterID],\n        SUM([QuantityProduced]) AS [TotalUnits],\n        SUM(CASE WHEN [Status] IN ('Completed', 'Inspected') THEN [QuantityProduced] ELSE 0 END) AS [GoodUnits]\n    FROM dbo.[ProductionData]\n    WHERE [ProductionDateTime] >= '2025-01-01' AND [ProductionDateTime] < '2025-02-01'\n    GROUP BY CAST([ProductionDateTime] AS DATE), [WorkCenterID]\n),\n\n-- CTE 3: Calculate OEE components for each individual Work Center's daily performance\nWorkCenterOEE AS (\n    SELECT\n        s.[Date],\n        s.[WorkCenterID],\n        ISNULL(p.[GoodUnits], 0) AS [GoodUnits],\n        (ISNULL(p.[TotalUnits], 0) - ISNULL(p.[GoodUnits], 0)) AS [DefectiveUnits],\n        s.[PlannedProductionHours],\n        ISNULL(d.[TotalDowntimeMinutes], 0) / 60.0 AS [DowntimeHours],\n        -- OEE Component Calculations\n        -- 1. Availability\n        CASE WHEN s.[PlannedProductionHours] > 0 THEN (s.[PlannedProductionHours] - (ISNULL(d.[TotalDowntimeMinutes], 0) / 60.0)) / s.[PlannedProductionHours] ELSE 0 END AS [Availability],\n        -- 2. Performance (Uses the @IdealProductionRateUnitsPerHour variable)\n        CASE WHEN (s.[PlannedProductionHours] - (ISNULL(d.[TotalDowntimeMinutes], 0) / 60.0)) > 0 THEN\n             LEAST(1.0, (ISNULL(p.[GoodUnits], 0) * 1.0) / ((s.[PlannedProductionHours] - (ISNULL(d.[TotalDowntimeMinutes], 0) / 60.0)) * @IdealProductionRateUnitsPerHour))\n             ELSE 0\n        END AS [Performance],\n        -- 3. Quality\n        CASE WHEN ISNULL(p.[TotalUnits], 0) > 0 THEN (ISNULL(p.[GoodUnits], 0) * 1.0 / p.[TotalUnits]) ELSE 1 END AS [Quality]\n    FROM WorkCenterDailyShifts s\n    LEFT JOIN DailyProductionMetrics p ON s.[Date] = p.[Date] AND s.[WorkCenterID] = p.[WorkCenterID]\n    LEFT JOIN ( -- Subquery to aggregate downtime per work center per day\n        SELECT CAST([DowntimeStartDateTime] AS DATE) AS [Date], [WorkCenterID], SUM(DATEDIFF(minute, [DowntimeStartDateTime], [DowntimeEndDateTime])) AS [TotalDowntimeMinutes]\n        FROM dbo.[MachineDowntime]\n        GROUP BY CAST([DowntimeStartDateTime] AS DATE), [WorkCenterID]\n    ) d ON s.[Date] = d.[Date] AND s.[WorkCenterID] = d.[WorkCenterID]\n)\n\n-- Final Step: Aggregate all work center data into a single daily summary for the final report\nSELECT\n    DATEPART(day, d.[Date]) AS [Day],\n    CAST(ISNULL(SUM(o.[PlannedProductionHours]), 0) AS DECIMAL(10, 1)) AS [TotalPlannedHours],\n    CAST(ISNULL(SUM(o.[DowntimeHours]), 0) AS DECIMAL(10, 1)) AS [TotalDowntimeHours],\n    ISNULL(SUM(o.[GoodUnits]), 0) AS [TotalGoodUnits],\n    ISNULL(SUM(o.[DefectiveUnits]), 0) AS [TotalDefectiveUnits],\n    -- Calculate final plant-wide OEE as a weighted average of individual work center OEEs\n    CONCAT(\n        FLOOR(\n            ISNULL(\n                SUM(o.[Availability] * o.[Performance] * o.[Quality] * o.[PlannedProductionHours]) / NULLIF(SUM(o.[PlannedProductionHours]), 0),\n                0\n            ) * 100\n        ),\n    '%') AS [Overall_OEE]\nFROM AllDays d\nLEFT JOIN WorkCenterOEE o ON d.[Date] = o.[Date]\nGROUP BY d.[Date]\nORDER BY d.[Date]\nOPTION (MAXRECURSION 100);"
  }
]